"""
Comprehensive AWS IAM permissions mapping for Terraform resources
"""

AWS_PERMISSIONS = {
    "acm": {
        "certificate": [
            "acm:AddTagsToCertificate",
            "acm:DeleteCertificate",
            "acm:DescribeCertificate",
            "acm:GetCertificate",
            "acm:ImportCertificate",
            "acm:ListCertificates",
            "acm:ListTagsForCertificate",
            "acm:RemoveTagsFromCertificate",
            "acm:RequestCertificate",
        ]
    },
    "airflow": {
        "environment": [
            "airflow:CreateEnvironment",
            "airflow:DeleteEnvironment",
            "airflow:GetEnvironment",
            "airflow:ListEnvironments",
            "airflow:PublishMetrics",
            "airflow:TagResource",
            "airflow:UpdateEnvironment",
        ]
    },
    "apigateway": {
        "api": [
            "apigateway:DELETE",
            "apigateway:GET",
            "apigateway:PATCH",
            "apigateway:POST",
            "apigateway:PUT",
            "apigateway:TagResource",
            "apigateway:UntagResource",
            "apigateway:UpdateRestApiPolicy",
        ]
    },
    "application-autoscaling": {
        "scaling": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
        ]
    },
    "autoscaling": {
        "group": [
            "autoscaling:AttachInstances",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DetachInstances",
            "autoscaling:SetDesiredCapacity",
            "autoscaling:SetInstanceProtection",
            "autoscaling:SuspendProcesses",
            "autoscaling:UpdateAutoScalingGroup",
        ],
        "launch_configuration": [
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:DeleteLaunchConfiguration",
        ],
        "tags": ["autoscaling:CreateOrUpdateTags", "autoscaling:DeleteTags"],
    },
    "backup": {
        "plan": [
            "backup:CreateBackupPlan",
            "backup:DeleteBackupPlan",
            "backup:GetBackupPlan",
            "backup:UpdateBackupPlan",
        ],
        "vault": [
            "backup:CreateBackupVault",
            "backup:DeleteBackupVault",
            "backup:DescribeBackupVault",
            "backup:ListBackupVaults",
            "backup:PutBackupVaultLockConfiguration",
        ],
        "selection": [
            "backup:CreateBackupSelection",
            "backup:DeleteBackupSelection",
            "backup:GetBackupSelection",
        ],
    },
    "chatbot": {
        "slack_channel": [
            "chatbot:CreateSlackChannelConfiguration",
            "chatbot:DeleteSlackChannelConfiguration",
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:UpdateSlackChannelConfiguration",
        ],
        "tags": ["chatbot:ListTagsForResource", "chatbot:TagResource", "chatbot:UntagResource"],
    },
    "cloudformation": {
        "stack": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:UpdateStack",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
        ],
        "stack_set": [
            "cloudformation:CreateStackSet",
            "cloudformation:DeleteStackSet",
            "cloudformation:UpdateStackSet",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackSetOperation",
        ],
        "resources": ["cloudformation:DescribeStackResources", "cloudformation:ListStackResources"],
    },
    "cloudfront": {
        "distribution": [
            "cloudfront:CreateDistribution",
            "cloudfront:DeleteDistribution",
            "cloudfront:UpdateDistribution",
            "cloudfront:GetDistribution",
        ],
        "origin_access_identity": [
            "cloudfront:CreateCloudFrontOriginAccessIdentity",
            "cloudfront:DeleteCloudFrontOriginAccessIdentity",
            "cloudfront:GetCloudFrontOriginAccessIdentity",
        ],
        "tags": ["cloudfront:ListTagsForResource", "cloudfront:TagResource"],
    },
    "cloudtrail": {
        "trail": [
            "cloudtrail:CreateTrail",
            "cloudtrail:DeleteTrail",
            "cloudtrail:UpdateTrail",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:StartLogging",
            "cloudtrail:StopLogging",
        ],
        "events": [
            "cloudtrail:GetEventSelectors",
            "cloudtrail:PutEventSelectors",
            "cloudtrail:LookupEvents",
        ],
        "tags": ["cloudtrail:ListTags", "cloudtrail:AddTags"],
    },
    "cloudwatch": {
        "alarm": [
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
        ],
        "tags": [
            "cloudwatch:ListTagsForResource",
            "cloudwatch:TagResource",
            "cloudwatch:UntagResource",
        ],
    },
    "cognito-idp": {
        "user_pool": [
            "cognito-idp:CreateUserPool",
            "cognito-idp:DeleteUserPool",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:UpdateUserPool",
            "cognito-idp:SetUserPoolMfaConfig",
            "cognito-idp:GetUserPoolMfaConfig",
        ],
        "user_pool_client": [
            "cognito-idp:CreateUserPoolClient",
            "cognito-idp:DeleteUserPoolClient",
            "cognito-idp:DescribeUserPoolClient",
        ],
        "group": [
            "cognito-idp:CreateGroup",
            "cognito-idp:DeleteGroup",
            "cognito-idp:GetGroup",
            "cognito-idp:UpdateGroup",
        ],
        "user": [
            "cognito-idp:AdminCreateUser",
            "cognito-idp:AdminDeleteUser",
            "cognito-idp:AdminGetUser",
            "cognito-idp:AdminAddUserToGroup",
            "cognito-idp:AdminRemoveUserFromGroup",
            "cognito-idp:AdminListGroupsForUser",
            "cognito-idp:AdminSetUserPassword",
            "cognito-idp:ResetUserPassword",
        ],
    },
    "dynamodb": {
        "table": [
            "dynamodb:CreateTable",
            "dynamodb:DeleteTable",
            "dynamodb:DescribeTable",
            "dynamodb:UpdateTable",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:UpdateContinuousBackups",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:UpdateTimeToLive",
            "dynamodb:UpdateGlobalTable",
            "dynamodb:UpdateGlobalTableSettings",
        ],
        "item": [
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:DeleteItem",
            "dynamodb:BatchGetItem",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:PartiQLSelect",
        ],
        "stream": [
            "dynamodb:DescribeStream",
            "dynamodb:GetRecords",
            "dynamodb:GetShardIterator",
            "dynamodb:ListStreams",
        ],
        "tags": ["dynamodb:ListTagsOfResource", "dynamodb:TagResource", "dynamodb:UntagResource"],
    },
    "ec2": {
        "instance": [
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:RebootInstances",
            "ec2:DescribeInstances",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:ModifyInstanceAttribute",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstanceCreditSpecifications",
        ],
        "security_group": [
            "ec2:CreateSecurityGroup",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeSecurityGroups",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:DescribeSecurityGroupRules",
            "ec2:ModifySecurityGroupRules",
            "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
            "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
        ],
        "volume": [
            "ec2:CreateVolume",
            "ec2:DeleteVolume",
            "ec2:DescribeVolumes",
            "ec2:AttachVolume",
            "ec2:DetachVolume",
            "ec2:PauseVolumeIO",
        ],
        "vpc": [
            "ec2:CreateVpc",
            "ec2:DeleteVpc",
            "ec2:DescribeVpcs",
            "ec2:ModifyVpcAttribute",
            "ec2:DescribeVpcAttribute",
            "ec2:CreateSubnet",
            "ec2:DeleteSubnet",
            "ec2:DescribeSubnets",
            "ec2:ModifySubnetAttribute",
            "ec2:CreateDefaultSubnet",
        ],
        "network_interface": [
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:AttachNetworkInterface",
            "ec2:DetachNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:AssignPrivateIpAddresses",
            "ec2:UnassignPrivateIpAddresses",
        ],
        "internet_gateway": [
            "ec2:CreateInternetGateway",
            "ec2:DeleteInternetGateway",
            "ec2:AttachInternetGateway",
            "ec2:DetachInternetGateway",
            "ec2:DescribeInternetGateways",
        ],
        "nat_gateway": ["ec2:CreateNatGateway", "ec2:DeleteNatGateway"],
        "route_table": [
            "ec2:CreateRouteTable",
            "ec2:DeleteRouteTable",
            "ec2:DescribeRouteTables",
            "ec2:CreateRoute",
            "ec2:DeleteRoute",
            "ec2:ReplaceRoute",
        ],
        "transit_gateway": [
            "ec2:CreateTransitGateway",
            "ec2:DeleteTransitGateway",
            "ec2:DescribeTransitGateways",
            "ec2:CreateTransitGatewayRouteTable",
            "ec2:DeleteTransitGatewayRouteTable",
            "ec2:DescribeTransitGatewayRouteTable",
            "ec2:CreateTransitGatewayVpcAttachment",
            "ec2:DeleteTransitGatewayVpcAttachment",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:AssociateTransitGatewayRouteTable",
            "ec2:DisassociateTransitGatewayRouteTable",
            "ec2:EnableTransitGatewayRouteTablePropagation",
            "ec2:DisableTransitGatewayRouteTablePropagation",
            "ec2:GetTransitGatewayRouteTableAssociations",
            "ec2:GetTransitGatewayRouteTablePropagations",
        ],
        "vpc_peering": [
            "ec2:CreateVpcPeeringConnection",
            "ec2:DeleteVpcPeeringConnection",
            "ec2:AcceptVpcPeeringConnection",
            "ec2:RejectVpcPeeringConnection",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:ModifyVpcPeeringConnectionOptions",
        ],
        "vpc_endpoint": [
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteVpcEndpoint",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcEndpointServices",
            "ec2:ModifyVpcEndpoint",
        ],
        "client_vpn": [
            "ec2:CreateClientVpnEndpoint",
            "ec2:DeleteClientVpnEndpoint",
            "ec2:ModifyClientVpnEndpoint",
            "ec2:AssociateClientVpnTargetNetwork",
            "ec2:DisassociateClientVpnTargetNetwork",
            "ec2:ApplySecurityGroupsToClientVpnTargetNetwork",
            "ec2:AuthorizeClientVpnIngress",
            "ec2:RevokeClientVpnIngress",
            "ec2:CreateClientVpnRoute",
            "ec2:DeleteClientVpnRoute",
        ],
        "elastic_ip": [
            "ec2:AllocateAddress",
            "ec2:ReleaseAddress",
            "ec2:DescribeAddresses",
            "ec2:DescribeAddressesAttribute",
            "ec2:AssociateAddress",
            "ec2:DisassociateAddress",
        ],
        "launch_template": [
            "ec2:CreateLaunchTemplate",
            "ec2:DeleteLaunchTemplate",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:ModifyLaunchTemplate",
            "ec2:GetLaunchTemplateData",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:DeleteLaunchTemplateVersions",
        ],
        "network_acl": [
            "ec2:CreateNetworkAcl",
            "ec2:DeleteNetworkAcl",
            "ec2:DescribeNetworkAcls",
            "ec2:CreateNetworkAclEntry",
            "ec2:ReplaceNetworkAclAssociation",
        ],
        "dhcp_options": ["ec2:CreateDhcpOptions", "ec2:DeleteDhcpOptions"],
        "egress_only_internet_gateway": [
            "ec2:CreateEgressOnlyInternetGateway",
            "ec2:DeleteEgressOnlyInternetGateway",
        ],
        "tags": ["ec2:CreateTags", "ec2:DeleteTags", "ec2:DescribeTags"],
        "images": [
            "ec2:DescribeImages",
            "ec2:ListImagesInRecycleBin",
            "ec2:ListSnapshotsInRecycleBin",
        ],
        "regions_azs": ["ec2:DescribeRegions", "ec2:DescribeAvailabilityZones"],
        "prefix_lists": [
            "ec2:DescribePrefixLists",
            "ec2:DescribeManagedPrefixLists",
            "ec2:GetManagedPrefixListEntries",
        ],
        "account_attributes": ["ec2:DescribeAccountAttributes"],
    },
    "ecr": {
        "repository": [
            "ecr:CreateRepository",
            "ecr:DeleteRepository",
            "ecr:DescribeRepositories",
            "ecr:GetRepositoryPolicy",
            "ecr:ListTagsForResource",
            "ecr:TagResource",
        ],
        "image": [
            "ecr:DescribeImages",
            "ecr:DescribeImageScanFindings",
            "ecr:ListImages",
            "ecr:PutImage",
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:CompleteLayerUpload",
            "ecr:GetDownloadUrlForLayer",
            "ecr:InitiateLayerUpload",
            "ecr:UploadLayerPart",
        ],
        "lifecycle": ["ecr:GetLifecyclePolicy", "ecr:GetLifecyclePolicyPreview"],
        "registry": ["ecr:DescribeRegistry", "ecr:GetRegistryPolicy"],
    },
    "ecs": {
        "cluster": ["ecs:CreateCluster", "ecs:DeleteCluster", "ecs:DescribeClusters"],
        "service": [
            "ecs:CreateService",
            "ecs:DeleteService",
            "ecs:DescribeServices",
            "ecs:UpdateService",
        ],
        "task_definition": [
            "ecs:RegisterTaskDefinition",
            "ecs:DeregisterTaskDefinition",
            "ecs:DescribeTaskDefinition",
        ],
        "task": ["ecs:DescribeTasks", "ecs:ListTasks", "ecs:RunTask", "ecs:StopTask"],
        "tags": ["ecs:TagResource", "ecs:UntagResource"],
    },
    "eks": {
        "cluster": [
            "eks:CreateCluster",
            "eks:DeleteCluster",
            "eks:DescribeCluster",
            "eks:UpdateClusterConfig",
            "eks:UpdateClusterVersion",
            "eks:ListClusters",
        ],
        "nodegroup": [
            "eks:CreateNodegroup",
            "eks:DeleteNodegroup",
            "eks:DescribeNodegroup",
            "eks:UpdateNodegroupConfig",
            "eks:UpdateNodegroupVersion",
            "eks:ListNodegroups",
        ],
        "fargate_profile": [
            "eks:CreateFargateProfile",
            "eks:DeleteFargateProfile",
            "eks:DescribeFargateProfile",
            "eks:ListFargateProfiles",
        ],
        "addon": [
            "eks:CreateAddon",
            "eks:DeleteAddon",
            "eks:DescribeAddon",
            "eks:UpdateAddon",
            "eks:ListAddons",
            "eks:DescribeAddonVersions",
        ],
        "update": ["eks:DescribeUpdate", "eks:ListUpdates"],
        "tags": ["eks:ListTagsForResource", "eks:TagResource", "eks:UntagResource"],
        "token": ["eks:GetToken"],
    },
    "elasticloadbalancing": {
        "load_balancer": [
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:ModifyLoadBalancerAttributes",
            "elasticloadbalancing:AttachLoadBalancerToDistribution",
        ],
        "listener": [
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeListenerAttributes",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:ModifyListenerAttributes",
        ],
        "target_group": [
            "elasticloadbalancing:CreateTargetGroup",
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:ModifyTargetGroupAttributes",
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:DescribeTargetHealth",
        ],
        "rule": [
            "elasticloadbalancing:CreateRule",
            "elasticloadbalancing:DeleteRule",
            "elasticloadbalancing:DescribeRules",
        ],
        "tags": [
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:RemoveTags",
            "elasticloadbalancing:DescribeTags",
        ],
        "web_acl": ["elasticloadbalancing:SetWebACL"],
    },
    "events": {
        "rule": [
            "events:PutRule",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:EnableRule",
            "events:DisableRule",
            "events:ListRules",
        ],
        "targets": ["events:PutTargets", "events:RemoveTargets", "events:ListTargetsByRule"],
        "event_bus": ["events:DescribeEventBus"],
        "tags": ["events:ListTagsForResource", "events:TagResource", "events:UntagResource"],
    },
    "firehose": {
        "delivery_stream": [
            "firehose:CreateDeliveryStream",
            "firehose:DeleteDeliveryStream",
            "firehose:DescribeDeliveryStream",
            "firehose:UpdateDestination",
            "firehose:StartDeliveryStreamEncryption",
        ],
        "records": ["firehose:PutRecord", "firehose:PutRecordBatch"],
        "tags": ["firehose:ListTagsForDeliveryStream", "firehose:TagDeliveryStream"],
    },
    "fis": {
        "experiment_template": [
            "fis:CreateExperimentTemplate",
            "fis:DeleteExperimentTemplate",
            "fis:GetExperimentTemplate",
            "fis:ListExperimentTemplates",
        ],
        "experiment": ["fis:ListExperiments", "fis:StartExperiment", "fis:StopExperiment"],
        "tags": ["fis:TagResource"],
    },
    "guardduty": {
        "malware_protection_plan": [
            "guardduty:CreateMalwareProtectionPlan",
            "guardduty:DeleteMalwareProtectionPlan",
            "guardduty:GetMalwareProtectionPlan",
            "guardduty:ListMalwareProtectionPlans",
            "guardduty:UpdateMalwareProtectionPlan",
        ],
        "tags": [
            "guardduty:ListTagsForResource",
            "guardduty:TagResource",
            "guardduty:UntagResource",
        ],
    },
    "iam": {
        "role": [
            "iam:CreateRole",
            "iam:DeleteRole",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:UpdateRole",
            "iam:PutRolePolicy",
            "iam:DeleteRolePolicy",
            "iam:GetRolePolicy",
            "iam:ListRolePolicies",
            "iam:AttachRolePolicy",
            "iam:DetachRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:PassRole",
            "iam:TagRole",
            "iam:UntagRole",
            "iam:UpdateAssumeRolePolicy",
            "iam:UpdateRoleDescription",
        ],
        "policy": [
            "iam:CreatePolicy",
            "iam:DeletePolicy",
            "iam:GetPolicy",
            "iam:ListPolicies",
            "iam:CreatePolicyVersion",
            "iam:DeletePolicyVersion",
            "iam:GetPolicyVersion",
            "iam:ListPolicyVersions",
            "iam:SetDefaultPolicyVersion",
            "iam:TagPolicy",
            "iam:UntagPolicy",
            "iam:ListEntitiesForPolicy",
        ],
        "user": [
            "iam:CreateUser",
            "iam:DeleteUser",
            "iam:GetUser",
            "iam:ListUsers",
            "iam:UpdateUser",
            "iam:CreateAccessKey",
            "iam:DeleteAccessKey",
            "iam:ListAccessKeys",
            "iam:UpdateAccessKey",
            "iam:PutUserPolicy",
            "iam:DeleteUserPolicy",
            "iam:GetUserPolicy",
            "iam:ListUserPolicies",
            "iam:AttachUserPolicy",
            "iam:DetachUserPolicy",
            "iam:ListAttachedUserPolicies",
            "iam:TagUser",
            "iam:UntagUser",
            "iam:ListGroupsForUser",
        ],
        "group": ["iam:DeleteGroup", "iam:AttachGroupPolicy", "iam:DetachGroupPolicy"],
        "instance_profile": [
            "iam:CreateInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:GetInstanceProfile",
            "iam:ListInstanceProfiles",
            "iam:ListInstanceProfilesForRole",
            "iam:AddRoleToInstanceProfile",
            "iam:RemoveRoleFromInstanceProfile",
            "iam:TagInstanceProfile",
        ],
        "openid_connect_provider": [
            "iam:CreateOpenIDConnectProvider",
            "iam:DeleteOpenIDConnectProvider",
            "iam:GetOpenIDConnectProvider",
            "iam:UpdateOpenIDConnectProviderThumbprint",
            "iam:TagOpenIDConnectProvider",
            "iam:UntagOpenIDConnectProvider",
            "iam:ListOpenIDConnectProviders",
        ],
        "service_linked_role": [
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
        ],
        "access_key": [
            "iam:CreateAccessKey",
            "iam:DeleteAccessKey",
            "iam:ListAccessKeys",
            "iam:UpdateAccessKey",
        ],
    },
    "kms": {
        "key": [
            "kms:CreateKey",
            "kms:DeleteKey",
            "kms:DescribeKey",
            "kms:EnableKey",
            "kms:DisableKey",
            "kms:GetKeyPolicy",
            "kms:PutKeyPolicy",
            "kms:GetKeyRotationStatus",
            "kms:EnableKeyRotation",
            "kms:DisableKeyRotation",
            "kms:ScheduleKeyDeletion",
            "kms:CancelKeyDeletion",
            "kms:UpdateKeyDescription",
            "kms:ImportKeyMaterial",
        ],
        "alias": ["kms:CreateAlias", "kms:DeleteAlias", "kms:UpdateAlias", "kms:ListAliases"],
        "grant": [
            "kms:CreateGrant",
            "kms:RetireGrant",
            "kms:RevokeGrant",
            "kms:ListGrants",
            "kms:ListRetirableGrants",
        ],
        "encryption": [
            "kms:Encrypt",
            "kms:Decrypt",
            "kms:GenerateDataKey",
            "kms:GenerateDataKeyWithoutPlaintext",
            "kms:ReEncryptFrom",
            "kms:ReEncryptTo",
        ],
        "tags": ["kms:ListResourceTags", "kms:TagResource", "kms:UntagResource"],
        "policies": ["kms:ListKeyPolicies"],
    },
    "lambda": {
        "function": [
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:ListFunctions",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "lambda:InvokeFunction",
            "lambda:AddPermission",
            "lambda:RemovePermission",
            "lambda:GetPolicy",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lambda:ListTags",
            "lambda:ListTagsForResource",
            "lambda:GetFunctionConfiguration",
            "lambda:GetFunctionCodeSigningConfig",
            "lambda:ListVersionsByFunction",
            "lambda:PublishVersion",
            "lambda:CreateAlias",
            "lambda:ListAliases",
            "lambda:PutFunctionConcurrency",
        ],
        "layer": [
            "lambda:CreateLayerVersion",
            "lambda:DeleteLayerVersion",
            "lambda:GetLayerVersion",
            "lambda:ListLayerVersions",
            "lambda:PublishLayerVersion",
        ],
    },
    "logs": {
        "log_group": [
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:DescribeLogGroups",
            "logs:CreateLogStream",
            "logs:DeleteLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:GetLogEvents",
            "logs:FilterLogEvents",
            "logs:PutRetentionPolicy",
            "logs:DeleteRetentionPolicy",
            "logs:PutSubscriptionFilter",
            "logs:DeleteSubscriptionFilter",
            "logs:DescribeSubscriptionFilters",
            "logs:TagLogGroup",
            "logs:UntagLogGroup",
            "logs:ListTagsLogGroup",
            "logs:ListTagsForResource",
            "logs:AssociateKmsKey",
            "logs:CreateLogDelivery",
        ],
        "destination": [
            "logs:PutDestination",
            "logs:DeleteDestination",
            "logs:DescribeDestinations",
        ],
        "metric_filter": [
            "logs:PutMetricFilter",
            "logs:DeleteMetricFilter",
            "logs:DescribeMetricFilters",
            "logs:TestMetricFilter",
        ],
        "resource_policy": [
            "logs:PutResourcePolicy",
            "logs:DeleteResourcePolicy",
            "logs:DescribeResourcePolicies",
        ],
        "query": ["logs:StartQuery", "logs:StopQuery", "logs:StartLiveTail", "logs:StopLiveTail"],
    },
    "organizations": {
        "organization": ["organizations:DescribeOrganization", "organizations:ListRoots"],
        "accounts": ["organizations:ListAccounts"],
        "service_access": ["organizations:ListAWSServiceAccessForOrganization"],
    },
    "rds": {
        "db_instance": ["rds:DescribeDBInstances", "rds:ModifyDBInstance"],
        "db_cluster": ["rds:DescribeDBClusters", "rds:ModifyDBCluster"],
        "snapshot": ["rds:DownloadDBSnapshot", "rds:DownloadDBLogFilePortion"],
        "tags": ["rds:ListTagsForResource"],
    },
    "route53": {
        "hosted_zone": [
            "route53:CreateHostedZone",
            "route53:DeleteHostedZone",
            "route53:GetHostedZone",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByVPC",
            "route53:AssociateVPCWithHostedZone",
            "route53:DisassociateVPCFromHostedZone",
            "route53:CreateVPCAssociationAuthorization",
            "route53:DeleteVPCAssociationAuthorization",
            "route53:ListVPCAssociationAuthorizations",
        ],
        "record_set": [
            "route53:ChangeResourceRecordSets",
            "route53:ListResourceRecordSets",
            "route53:GetChange",
        ],
        "delegation_set": [
            "route53:CreateReusableDelegationSet",
            "route53:DeleteReusableDelegationSet",
            "route53:GetReusableDelegationSet",
        ],
        "dnssec": ["route53:GetDNSSEC"],
        "tags": ["route53:ListTagsForResource", "route53:ChangeTagsForResource"],
    },
    "s3": {
        "bucket": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:ListBucket",
            "s3:GetBucketLocation",
            "s3:GetBucketVersioning",
            "s3:GetBucketPolicy",
            "s3:PutBucketPolicy",
            "s3:DeleteBucketPolicy",
            "s3:GetBucketCors",
            "s3:PutBucketCors",
            "s3:DeleteBucketCors",
            "s3:GetBucketWebsite",
            "s3:PutBucketWebsite",
            "s3:DeleteBucketWebsite",
            "s3:GetBucketAcl",
            "s3:PutBucketAcl",
            "s3:GetBucketPublicAccessBlock",
            "s3:PutBucketPublicAccessBlock",
            "s3:GetBucketTagging",
            "s3:PutBucketTagging",
            "s3:GetBucketEncryption",
            "s3:PutBucketEncryption",
            "s3:DeleteBucketEncryption",
            "s3:GetBucketLifecycleConfiguration",
            "s3:PutBucketLifecycleConfiguration",
            "s3:DeleteBucketLifecycleConfiguration",
            "s3:GetBucketLogging",
            "s3:PutBucketLogging",
            "s3:GetBucketOwnershipControls",
            "s3:PutBucketOwnershipControls",
            "s3:GetBucketRequestPayment",
            "s3:GetBucketObjectLockConfiguration",
            "s3:GetAccelerateConfiguration",
            "s3:GetIntelligentTieringConfiguration",
            "s3:PutIntelligentTieringConfiguration",
            "s3:GetReplicationConfiguration",
            "s3:PutReplicationConfiguration",
            "s3:GetEncryptionConfiguration",
            "s3:PutEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:PutLifecycleConfiguration",
            "s3:GetBucketVersioning",
            "s3:PutBucketVersioning",
            "s3:ListBucketVersions",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:AbortMultipartUpload",
            "s3:ListObjectsV2",
            "s3:ListObjectVersions",
        ],
        "object": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:GetObjectVersion",
            "s3:DeleteObjectVersion",
            "s3:GetObjectAcl",
            "s3:PutObjectAcl",
            "s3:GetObjectVersionAcl",
            "s3:PutObjectVersionAcl",
            "s3:GetObjectTagging",
            "s3:PutObjectTagging",
            "s3:GetObjectAttributes",
            "s3:HeadObject",
            "s3:PutObjectLogging",
        ],
        "job": ["s3:DescribeJob"],
    },
    "secretsmanager": {
        "secret": [
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue",
            "secretsmanager:UpdateSecret",
            "secretsmanager:UpdateSecretVersionStage",
            "secretsmanager:RotateSecret",
            "secretsmanager:CancelRotateSecret",
            "secretsmanager:GetRandomPassword",
            "secretsmanager:ListSecrets",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:ReplicateSecretToRegions",
            "secretsmanager:RemoveRegionsFromReplication",
        ],
        "resource_policy": [
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:DeleteResourcePolicy",
        ],
        "tags": ["secretsmanager:TagResource", "secretsmanager:UntagResource"],
    },
    "securityhub": {
        "hub": [
            "securityhub:EnableImportFindingsForProduct",
            "securityhub:DisableImportFindingsForProduct",
            "securityhub:ListEnabledProductsForImport",
        ]
    },
    "servicediscovery": {
        "namespace": [
            "servicediscovery:CreatePrivateDnsNamespace",
            "servicediscovery:DeleteNamespace",
            "servicediscovery:GetNamespace",
            "servicediscovery:ListNamespaces",
        ],
        "service": [
            "servicediscovery:CreateService",
            "servicediscovery:DeleteService",
            "servicediscovery:GetService",
            "servicediscovery:ListServices",
        ],
        "operation": ["servicediscovery:GetOperation"],
        "tags": ["servicediscovery:ListTagsForResource", "servicediscovery:TagResource"],
    },
    "signer": {
        "signing_profile": [
            "signer:PutSigningProfile",
            "signer:GetSigningProfile",
            "signer:ListSigningProfiles",
            "signer:CancelSigningProfile",
            "signer:RevokeSigningProfile",
            "signer:AddProfilePermission",
            "signer:RemoveProfilePermission",
            "signer:ListProfilePermissions",
        ],
        "signing_job": [
            "signer:StartSigningJob",
            "signer:DescribeSigningJob",
            "signer:ListSigningJobs",
        ],
        "signing_platform": ["signer:GetSigningPlatform", "signer:ListSigningPlatforms"],
        "revocation": ["signer:GetRevocationStatus", "signer:RevokeSignature"],
        "payload": ["signer:SignPayload"],
        "tags": ["signer:ListTagsForResource", "signer:TagResource", "signer:UntagResource"],
    },
    "sns": {
        "topic": [
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:GetTopicAttributes",
            "sns:SetTopicAttributes",
            "sns:ListTopics",
            "sns:Publish",
        ],
        "subscription": [
            "sns:Subscribe",
            "sns:Unsubscribe",
            "sns:GetSubscriptionAttributes",
            "sns:ListSubscriptionsByTopic",
        ],
        "tags": ["sns:ListTagsForResource", "sns:TagResource", "sns:UntagResource"],
    },
    "sqs": {
        "queue": [
            "sqs:createqueue",
            "sqs:deletequeue",
            "sqs:getqueueattributes",
            "sqs:setqueueattributes",
            "sqs:listqueuetags",
            "sqs:tagqueue",
        ]
    },
    "ssm": {
        "parameter": [
            "ssm:PutParameter",
            "ssm:DeleteParameter",
            "ssm:DeleteParameters",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:GetParametersByPath",
            "ssm:GetParameterHistory",
        ],
        "activation": ["ssm:CreateActivation", "ssm:DeleteActivation", "ssm:DescribeActivations"],
        "command": ["ssm:SendCommand", "ssm:ListCommands", "ssm:CancelCommand"],
        "instance": ["ssm:UpdateInstanceInformation"],
        "tags": ["ssm:AddTagsToResource"],
    },
    "sts": {"assume_role": ["sts:AssumeRole"], "caller_identity": ["sts:GetCallerIdentity"]},
    "transfer": {
        "server": [
            "transfer:CreateServer",
            "transfer:DeleteServer",
            "transfer:DescribeServer",
            "transfer:StartServer",
            "transfer:StopServer",
            "transfer:UpdateServer",
        ],
        "ssh_public_key": ["transfer:ImportSshPublicKey"],
        "tags": ["transfer:TagResource"],
    },
    "wafv2": {
        "web_acl": [
            "wafv2:CreateWebACL",
            "wafv2:DeleteWebACL",
            "wafv2:GetWebACL",
            "wafv2:UpdateWebACL",
            "wafv2:AssociateWebACL",
            "wafv2:DisassociateWebACLLogDestination",
            "wafv2:GetWebACLForResource",
        ],
        "ip_set": ["wafv2:CreateIPSet", "wafv2:DeleteIPSet", "wafv2:GetIPSet", "wafv2:UpdateIPSet"],
        "regex_pattern_set": [
            "wafv2:CreateRegexPatternSet",
            "wafv2:DeleteRegexPatternSet",
            "wafv2:GetRegexPatternSet",
            "wafv2:UpdateRegexPatternSet",
            "wafv2:ListRegexPatternSets",
        ],
        "rule_group": [
            "wafv2:CreateRuleGroup",
            "wafv2:DeleteRuleGroup",
            "wafv2:GetRuleGroup",
            "wafv2:UpdateRuleGroup",
        ],
        "logging": [
            "wafv2:AssociateWebACLLogDestination",
            "wafv2:DisassociateWebACLLogDestination",
            "wafv2:GetLoggingConfiguration",
            "wafv2:PutLoggingConfiguration",
            "wafv2:DeleteLoggingConfiguration",
            "wafv2:ListLoggingConfigurations",
        ],
        "capacity": ["wafv2:CheckCapacity"],
        "tags": ["wafv2:ListTagsForResource", "wafv2:TagResource"],
    },
}
