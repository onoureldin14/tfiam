"""Policy generator for creating IAM policies and reports."""

import json
import os
from datetime import datetime
from typing import Any, Dict, List

from .models import IAMStatement


class PolicyGenerator:
    """Generates IAM policies and analysis reports."""

    @staticmethod
    def save_policy_clean(
        statements: List[IAMStatement], analysis_metadata: Dict[str, Any], filename: str
    ) -> int:
        """Save clean JSON policy without comments - only Version and Statement section."""
        policy: Dict[str, Any] = {"Version": "2012-10-17", "Statement": []}

        for statement in statements:
            statement_dict = {
                "Sid": statement.sid,
                "Effect": statement.effect,
                "Action": statement.action,
                "Resource": statement.resource,  # This now handles lists
            }
            policy["Statement"].append(statement_dict)

        with open(filename, "w", encoding="utf-8") as f:
            json.dump(policy, f, indent=2, ensure_ascii=False)

        return os.path.getsize(filename)

    @staticmethod
    def save_markdown_report(
        statements: List[IAMStatement], analysis_metadata: Dict[str, Any], filename: str
    ) -> int:
        """Save detailed Markdown report with AI explanations."""
        with open(filename, "w", encoding="utf-8") as f:
            f.write("# TFIAM Analysis Report\n\n")
            f.write(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(
                f"**Terraform Directory:** {analysis_metadata.get('terraform_directory', 'N/A')}\n"
            )
            f.write(f"**Services Analyzed:** {analysis_metadata.get('services_count', 0)}\n")
            f.write(f"**Total Statements:** {len(statements)}\n")
            f.write(f"**Total Permissions:** {sum(len(stmt.action) for stmt in statements)}\n\n")

            f.write("## Summary\n\n")
            services = analysis_metadata.get("services", [])
            if services:
                f.write("**Discovered AWS Services:**\n")
                for service in sorted(services):
                    f.write(f"- {service.upper()}\n")
                f.write("\n")

            f.write("## IAM Policy Statements\n\n")

            for i, statement in enumerate(statements, 1):
                f.write(f"### Statement {i}: {statement.sid}\n\n")
                f.write(f"**Purpose:** {statement.explanation}\n\n")
                f.write(f"**Effect:** {statement.effect}\n\n")
                f.write(f"**Resource:** `{statement.resource}`\n\n")
                f.write("**Actions:**\n")
                for action in statement.action:
                    f.write(f"- `{action}`\n")
                f.write("\n---\n\n")

            f.write("## Security Notes\n\n")
            f.write("- Review all permissions before deployment\n")
            f.write("- Consider implementing least-privilege access\n")
            f.write("- Regularly audit IAM policies for compliance\n")
            f.write("- Use specific resource ARNs when possible\n\n")

            f.write("*Generated by TFIAM - Terraform IAM Permission Analyzer*\n")

        return os.path.getsize(filename)
